name: ccd-extension-youtube-upload
version: 0.0.1
specVersion: v1beta

displayName: CodingCatDev Extension YouTube Upload
description: >-
  This extension will allow you to upload a video to storage, 
  along with metadata to Firestore.
  It will then take those two items and upload to YouTube. 
  On completion the details of this upload will then be stored
  within Firestore in a sub collection.

license: Apache-2.0

sourceUrl: https://github.com/CodingCatDev/firebase-extension-youtube-upload
releaseNotesUrl: https://github.com/CodingCatDev/firebase-extension-youtube-upload/CHANGELOG.md

author:
  authorName: CodingCatDev
  url: https://codingcat.dev
contributors:
  - authorName: Alex Patterson
    url: https://twitter.com/codingcatdev

billingRequired: true

roles:
  - role: datastore.user
    reason: >-
      Allows the extension to store video details in Firestore

params:
  - param: LOCATION
    label: Cloud Functions location
    description: >-
      Where do you want to deploy the functions created for this extension?
      You usually want a location close to your database. Realtime Database
      instances are located in `us-central1`. For help selecting a
      location, refer to the [location selection
      guide](https://firebase.google.com/docs/functions/locations).
    type: select
    options:
      - label: Iowa (us-central1)
        value: us-central1
      - label: South Carolina (us-east1)
        value: us-east1
      - label: Northern Virginia (us-east4)
        value: us-east4
      - label: Belgium (europe-west1)
        value: europe-west1
      - label: London (europe-west2)
        value: europe-west2
      - label: Frankfurt (europe-west3)
        value: europe-west3
      - label: Hong Kong (asia-east2)
        value: asia-east2
      - label: Tokyo (asia-northeast1)
        value: asia-northeast1
    default: us-central1
    required: true
    immutable: true

  - param: CLIENT_ID
    label: OAuth 2.0 Client ID
    description: >-
      You can find more details about creating your 
      [Credentials](https://developers.google.com/youtube/registering_an_application)
      [Google API Console](https://console.developers.google.com/apis/credentials)
    example: 929765314568-ubh2567c8lmnopc10bqenka7q8a0k9tq.apps.googleusercontent.com
    required: true
  - param: CLIENT_SECRET
    label: OAuth 2.0 Client Secret
    description: >-
      You can find more details about creating your 
      [Credentials](https://developers.google.com/youtube/registering_an_application)
      [Google API Console](https://console.developers.google.com/apis/credentials)
    example: TFIhzlelmnop-bJqKrkPODha
    required: true
  - param: TOKEN_COLLECTION
    label: Firestore collection path
    description: >-
      Firestore collection path that holds user OAuth Tokens
    default: youtubeApiTokens
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Firestore collection paths must be an odd number of segments separated by slashes, e.g. "path/to/collection".
  - param: TRIGGER_COLLECTION
    label: Firestore collection path
    description: >-
      Firestore collection path that triggers on create, this is where the meta data for your video will be held.
    default: videoMetas
    validationRegex: "^[^/]+(/[^/]+/[^/]+)*$"
    validationErrorMessage: Firestore collection paths must be an odd number of segments separated by slashes, e.g. "path/to/collection".

resources:

  - name: getAuthURL
    type: firebaseextensions.v1beta.function
    description: >-
      Creates OAuth 2.0 url link for authorization
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      httpsTrigger: {}
  - name: createAndSaveTokens
    type: firebaseextensions.v1beta.function
    description: >-
      Takes in an Auth Code. Creates a refresh token and stores that token in TOKEN_COLLECTION
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      httpsTrigger: {}
  - name: onVideoMetaCreate
    type: firebaseextensions.v1beta.function
    description: >-
      Uploads video to YouTube and adds metadata, storing results
    properties:
      location: ${LOCATION}
      runtime: nodejs12
      eventTrigger:
        eventType: providers/cloud.firestore/eventTypes/document.create
        resource: projects/${PROJECT_ID}/databases/(default)/documents/${TRIGGER_COLLECTION}/{videoMetaId}